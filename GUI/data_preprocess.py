# Form implementation generated from reading ui file 'GUI_DM_Part1.ui'
#
# Created by: PyQt6 UI code generator 6.7.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

# pyuic6 -x GUI_DM_Part1.ui -o DM_Interface_P1.py

from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd
from io import StringIO # rediriger la sortie du dataset.info() en un string
from collections import Counter
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from scipy import stats

class DataAnalysisWidget(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.ui = Ui_Form()
        self.ui.setupUi(self)
        
        # Connect signals (if not already connected in setupUi)
        self.ui.pushButton_reset.clicked.connect(self.ui.reset_action)
        self.ui.pushButton_download_file.clicked.connect(self.ui.download_dataset)
        self.ui.pushButton_search.clicked.connect(self.ui.search_action)
        self.ui.pushButton_save_dataset.clicked.connect(self.ui.save_dataset)

class Ui_Form(object):

    def central_tendancy (self, dataset, attribut):
        if pd.api.types.is_numeric_dtype(dataset[attribut]) and attribut != "geometry" and attribut != "time":
            liste = list(dataset[attribut].dropna()) # on crée une liste contenant les valeurs de l'attribut sans les valeurs NaN
            liste.sort()
            moyenne = sum(liste) / len(liste)
            moyenne = round(moyenne, 4)

            if len(liste) % 2 == 0 :
                mediane = (liste[len(liste) // 2] + liste[(len(liste)+1) // 2] ) / 2  # pair
            else:
                mediane = liste[(len(liste)+1) // 2]  # impair, devision entiere avec //

            frequence = {}
            frequence = Counter(liste)
            if len(set(frequence.values())) == 1: # que des valeurs uniques
                mode = None
                # print("le mode : il n'y a pas de mode!")
            else:
                max_key = max(frequence, key=frequence.get) # on récupere la clé qui correspond a la valeur maximale
                mode = []
                for key, value in frequence.items():
                    if value == frequence[max_key]:
                        mode.append(key)

                if len(mode) == 1:
                    if moyenne == mediane == mode[0] :
                        print(f"{attribut} est symétrique")
                    elif moyenne > mediane > mode[0] :
                        print(f"{attribut} est asymétrique positive")
                    elif moyenne < mediane < mode[0] :
                        print(f"{attribut} est asymétrique négative")
                    else:
                        print(f"{attribut} est asymétrique")
                else:
                        print(f"{attribut} est asymétrique")
            return moyenne, mediane, mode

    def attribute_quartiles_outliers(self, dataset, attribut):
        if pd.api.types.is_numeric_dtype(dataset[attribut]) and attribut != "geometry" and attribut != "time":
            liste = list(dataset[attribut].dropna())
            liste.sort()

            Q0 = liste[0] # min
            Q1 = liste[len(liste) // 4] # 25%,  Q1 = np.percentile(liste, 25)

            if len(liste) % 2 == 0 :
                Q2 = (liste[len(liste) // 2] + liste[(len(liste)+1) // 2] ) / 2  # pair, 50%
            else:
                Q2 = liste[(len(liste)+1) // 2]  # impair, 50%

            Q3 =  liste[len(liste)*3 // 4] # 75%,  Q3 = np.percentile(liste, 75)
            Q4 = liste[-1] # max

            quartiles = ", ".join(map(str, [Q0, Q1, Q2, Q3, Q4]))
            
            # calculer les outliers
            IQR = Q3 - Q1
            val_1 = Q1 - 1.5 * IQR
            val_2 = Q3 + 1.5 * IQR
            outliers = [x for x in liste if x < val_1 or x > val_2]
            if len(outliers) == 0 :
                outliers = None
        return quartiles, outliers

    def count_unique_NaN_values(self, dataset, attribut):
        # Compter les valeurs non nulles uniquement
        frequence = Counter(element for element in dataset[attribut] if element is not None and not pd.isna(element))
        unique_values = len(frequence)

        nan_values = 0
        # pourcentage = 0
        for element in dataset[attribut]:
            if pd.isnull(element) :
                nan_values += 1
        # pourcentage = (nan_values * 100) / len(dataset[attribut])

        return unique_values, nan_values

    def is_better_pair(self, dataset, attribut1, attribut2):
        variance1 = dataset[attribut1].var()
        variance2 = dataset[attribut2].var()
        return variance2 > variance1  # On retourne True si la variance de attribut2 est plus grande

    def attribute_vizualisation(self, dataset, attribut1, attribut2, boxplot, histogram, scatterplot):
        if attribut1 != "geometry" and attribut2 != "geometry" and attribut1 != "time" and attribut2 != "time":
            # Créer une nouvelle figure et un axe pour le graphique
            fig, ax = plt.subplots(figsize=(4, 4))

            # Nettoyer le layout actuel pour éviter les interférences avec d'anciennes figures
            layout = self.graphicsView_graphique.layout()
            if layout is not None:
                for i in reversed(range(layout.count())):
                    widget = layout.itemAt(i).widget()
                    if widget is not None:
                        widget.deleteLater()

            # Boxplot
            if boxplot:
                liste = dataset[attribut1].dropna()
                ax.boxplot(liste, showfliers=True, showmeans=True)
                ax.set_title(f'Boxplot of {attribut1} (with outliers)')
            
            # Histogramme
            elif histogram:
                liste = dataset[attribut1].dropna()
                ax.hist(liste, bins=30, color='skyblue', edgecolor='black')
                ax.set_title(f'Histogram of {attribut1}')
                ax.set_xlabel(attribut1)
                ax.set_ylabel('Frequency')
            
            # Scatterplot
            elif scatterplot and attribut1 != attribut2:
                liste1 = dataset[attribut1].dropna()
                liste2 = dataset[attribut2].dropna()

                # Vérifier si les données sont suffisantes
                if len(liste1) > 1 and len(liste2) > 1:
                    if self.is_better_pair(dataset, attribut2, attribut1): 
                        x, y = liste2, liste1
                    else:
                        x, y = liste1, liste2
                    
                    # Vérifier si les valeurs de x ne sont pas toutes identiques
                    if len(set(x)) > 1:
                        # Calculer la régression linéaire
                        slope, intercept, rvalue, pvalue, stderr = stats.linregress(x, y)
                        ax.plot(x, slope * x + intercept, color='red', label='Regression line')
                        ax.annotate(f'y = {slope:.2f}x + {intercept:.2f}', 
                                    xy=(0.05, 0.95), xycoords='axes fraction', 
                                    fontsize=10, color='red', 
                                    horizontalalignment='left', verticalalignment='top')
                    
                    ax.scatter(x, y, alpha=0.5)
                    ax.set_xlabel(attribut2 if x is liste2 else attribut1)
                    ax.set_ylabel(attribut1 if x is liste2 else attribut2)
                    ax.set_title(f'Scatterplot of {attribut1} vs {attribut2}')
                else:
                    ax.text(0.5, 0.5, 'Not enough data for scatterplot', 
                            horizontalalignment='center', verticalalignment='center', 
                            transform=ax.transAxes, fontsize=12, color='red')
            
            # Ajouter le graphique au QGraphicsView
            canvas = FigureCanvas(fig)
            canvas.draw()

            if layout is None:
                layout = QtWidgets.QVBoxLayout(self.graphicsView_graphique)
            layout.addWidget(canvas)
            self.graphicsView_graphique.setLayout(layout)

    def display_dataset_attribut(self, dataset, attribut1, attribut2, boxplot, histogram, scatterplot):
        print("display dataset attributs info")
        moyenne, mediane, mode = self.central_tendancy(dataset, attribut1)
        self.textBrowser_mean.setText(str(moyenne))
        self.textBrowser_median.setText(str(mediane))
        self.textBrowser_mode.setText(str(mode))

        min_value = min(dataset[attribut1])
        max_value = max(dataset[attribut1])
        self.textBrowser_min.setText(str(min_value))
        self.textBrowser_max.setText(str(max_value))

        quartiles, outliers = self.attribute_quartiles_outliers(dataset, attribut1)
        self.textBrowser_quartiles.setText(str(quartiles))
        self.textBrowser_outliers.setText(str(outliers))

        unique_values, missing_values = self.count_unique_NaN_values(dataset, attribut1)
        self.textBrowser_unique_values.setText(str(unique_values))
        self.textBrowser_missing_values.setText(str(missing_values))

        self.attribute_vizualisation(dataset, attribut1, attribut2, boxplot, histogram, scatterplot)
        
    def display_dataset(self, dataset_infos, dataset):
        # Afficher les infos dans le textBrowser
        self.textBrowser_dataset_infos.setText(dataset_infos)

        # determiner le nombre le lignes, colonnes
        rows, cols = dataset.shape
        self.tableWidget_display_dataset.setColumnCount(cols)
        self.tableWidget_display_dataset.setRowCount(rows)
        # afficher le noms des colonnes
        column_names = dataset.columns
        self.tableWidget_display_dataset.setHorizontalHeaderLabels(column_names)
        # afficher le dataset
        for i in range(rows):
            for j in range(cols):
                # on utilise .iloc pour accéder aux valeurs du DataFrame
                value = str(dataset.iloc[i, j])  # Convertir en string pour l'affichage
                self.tableWidget_display_dataset.setItem(i, j, QtWidgets.QTableWidgetItem(value))
        return        
    
    def download_dataset(self):
        selected_file = self.comboBox_selected_file.currentText()
        minimise = False
        if selected_file == "soil_dz_allprops.csv":
            dataset = pd.read_csv("./data/soil_dz_allprops.csv")
        elif selected_file == "Climate_dz_data_2.csv":
            dataset = pd.read_csv("./data/Climate_dz_data_2.csv")
            minimise = True
        elif selected_file == "cleaned_data.csv" :
            dataset = pd.read_csv("./results/normalized_cleaned_data.csv")
           
        # Rediriger la sortie de dataset.info() dans une chaîne
        buffer = StringIO()
        dataset.info(buf=buffer)
        dataset_infos = buffer.getvalue()  # Récupérer les informations du buffer

        if minimise:
            dataset = dataset.head(900) # afficher que 900 premieres instances du dataset climate
        
        # appel de la fonction
        self.display_dataset(dataset_infos, dataset)

        # Mettre à jour les ComboBox avec les noms des colonnes
        self.comboBox_attribut1.clear()  # Effacer les anciens items
        self.comboBox_attribut2.clear()
        for col in dataset.columns:
            self.comboBox_attribut1.addItem(col)
            self.comboBox_attribut2.addItem(col)
        return

    def reset_action(self):
        print("reset action")
        # Effacer le contenu du tableau
        self.tableWidget_display_dataset.clearContents()
        self.tableWidget_display_dataset.setRowCount(0)
        self.tableWidget_display_dataset.setColumnCount(0)
        self.tableWidget_display_dataset.setHorizontalHeaderLabels([])
        # Effacer les informations affichées dans QTextBrowser
        self.textBrowser_dataset_infos.clear()
        # Réinitialiser ComboBox à son état initial (si nécessaire)
        self.comboBox_selected_file.setCurrentIndex(0)  # Sélectionne le premier élément
        self.comboBox_attribut1.setCurrentIndex(0)
        self.comboBox_attribut2.setCurrentIndex(0)
        # Réinitialiser les RadioButtons
        self.radioButton_boxplot.setChecked(False)
        self.radioButton_histogram.setChecked(False)
        self.radioButton_scatter_plot.setChecked(False)
        # Réinitialiser les RadioButtons pour la manipulation des données
        self.radioButton_add_instance.setChecked(False)
        self.radioButton_update_instance.setChecked(False)
        self.radioButton_delete_instance.setChecked(False)
        # Réinitialiser les LineEdits
        self.lineEdit_dataset_manipulation.clear()  # Vide le texte
        # Réinitialiser les RadioButtons pour le prétraitement
        # self.radioButton_missing_values.setChecked(False)
        # self.radioButton_outliers.setChecked(False)
        # self.radioButton_aggregation_by_season.setChecked(False)
        # self.radioButton_merge_datasets.setChecked(False)
        # self.radioButton_reduce_dataset.setChecked(False)
        # self.radioButton_discretize_dataset.setChecked(False)
        # self.radioButton_normalize_dataset.setChecked(False)
        # activer les boutons du preprocessing
        self.radioButton_missing_values.setDisabled(False)
        self.radioButton_outliers.setDisabled(False)
        self.radioButton_aggregation_by_season.setDisabled(False)
        self.radioButton_merge_datasets.setDisabled(False)
        self.radioButton_reduce_dataset.setDisabled(False)
        self.radioButton_discretize_dataset.setDisabled(False)
        self.radioButton_normalize_dataset.setDisabled(False)
        # nettoyer les sorties du dataset attribut analysis 
        self.textBrowser_mean.clear()
        self.textBrowser_median.clear()
        self.textBrowser_mode.clear()
        self.textBrowser_min.clear()
        self.textBrowser_max.clear()
        self.textBrowser_quartiles.clear()
        self.textBrowser_outliers.clear()
        self.textBrowser_unique_values.clear()
        self.textBrowser_missing_values.clear()
        # Nettoyer le layout actuel pour éviter les interférences avec d'anciennes figures
        layout = self.graphicsView_graphique.layout()
        if layout is not None:
            for i in reversed(range(layout.count())):
                widget = layout.itemAt(i).widget()
                if widget is not None:
                    widget.deleteLater()

    def manage_preprocessing_steps(self):
        print("manage preprocessing steps")
        selected_file = self.comboBox_selected_file.currentText()
        if selected_file == "soil_dz_allprops.csv":
            self.radioButton_missing_values.setDisabled(False) # Activer le bouton
            self.radioButton_outliers.setDisabled(False) # Activer le bouton
            # désectiver le reste des boutons
            self.radioButton_aggregation_by_season.setDisabled(True)
            self.radioButton_merge_datasets.setDisabled(True)
            self.radioButton_reduce_dataset.setDisabled(True)
            self.radioButton_discretize_dataset.setDisabled(True)
            self.radioButton_normalize_dataset.setDisabled(True)
        elif selected_file == "Climate_dz_data_2.csv":
            self.radioButton_missing_values.setDisabled(False) # Activer le bouton
            self.radioButton_outliers.setDisabled(False) # Activer le bouton
            self.radioButton_aggregation_by_season.setDisabled(False) # Activer le bouton
            # désectiver le reste des boutons
            self.radioButton_merge_datasets.setDisabled(True)
            self.radioButton_reduce_dataset.setDisabled(True)
            self.radioButton_discretize_dataset.setDisabled(True)
            self.radioButton_normalize_dataset.setDisabled(True)
        elif selected_file == "cleaned_data.csv":
            self.radioButton_missing_values.setDisabled(True) # Activer le bouton
            self.radioButton_outliers.setDisabled(True) # Activer le bouton
            self.radioButton_aggregation_by_season.setDisabled(True) # Activer le bouton
            # activer le rest des boutons
            self.radioButton_merge_datasets.setDisabled(False)
            self.radioButton_reduce_dataset.setDisabled(False)
            self.radioButton_discretize_dataset.setDisabled(False)
            self.radioButton_normalize_dataset.setDisabled(False)

        if self.radioButton_scatter_plot.isChecked() == False:
            self.comboBox_attribut2.setVisible(False)
        else : 
            self.comboBox_attribut2.setVisible(True)

    def get_dataset_from_table(self):
        # Récupérer le nombre de lignes et de colonnes dans le QTableWidget
        row_count = self.tableWidget_display_dataset.rowCount()
        column_count = self.tableWidget_display_dataset.columnCount()

        # Extraire les données ligne par ligne et colonne par colonne
        data = []
        for row in range(row_count):
            row_data = []
            for col in range(column_count):
                # Récupérer la valeur de chaque cellule du QTableWidget
                item = self.tableWidget_display_dataset.item(row, col)
                if item is not None:
                    row_data.append(item.text())  # Ajouter la valeur à la ligne
                else:
                    row_data.append("")  # Ajouter une chaîne vide si la cellule est vide
            data.append(row_data)

        # Récupérer les en-têtes de colonnes
        column_headers = []
        for col in range(column_count):
            item = self.tableWidget_display_dataset.horizontalHeaderItem(col)
            if item is not None:
                column_headers.append(item.text())  # Récupérer le texte de l'en-tête de la colonne
            else:
                column_headers.append(f"Column {col}")  # Nom par défaut pour la colonne si l'en-tête est vide

        # Convertir les données en DataFrame Pandas
        df = pd.DataFrame(data, columns=column_headers)

        return df

    def save_dataset(self):
        print("save dataset")
        # data manipulation
        add_instance = self.radioButton_add_instance.isChecked()
        update_instance = self.radioButton_update_instance.isChecked()
        remove_instance = self.radioButton_delete_instance.isChecked()
        selected_instance = self.lineEdit_dataset_manipulation.text()

        try:
            # Charger le dataset actif
            dataset = self.get_dataset_from_table()

            if dataset.empty:
                print("Dataset is empty!")
                return
            
            # Suppression d'une instance (delete)
            if remove_instance:
                values = [val.strip() for val in selected_instance.split(",")]  # Découper la chaîne en liste
                if len(values) == len(dataset.columns):  # Vérifier que les valeurs correspondent aux colonnes
                    condition = (dataset == values).all(axis=1)  # Vérifier si une ligne correspond aux valeurs
                    if condition.any():
                        dataset = dataset.loc[~condition].reset_index(drop=True)  # Supprimer les lignes correspondantes
                        print(f"Row {values} has been removed.")
                    else:
                        print(f"No matching row found for values: {values}.")
                else:
                    print("Invalid input: Number of values does not match dataset columns.")

            # Ajout d'une nouvelle instance (add)
            elif add_instance:
                values = [val.strip() for val in selected_instance.split(",")]  # Découper la chaîne en liste
                if len(values) == len(dataset.columns):  # Vérifier que les valeurs correspondent aux colonnes
                    new_instance = dict(zip(dataset.columns, values))  # Créer une nouvelle ligne comme dictionnaire
                    dataset = pd.concat([dataset, pd.DataFrame([new_instance])], ignore_index=True)
                    print(f"New instance added: {new_instance}")
                else:
                    print("Invalid input: Number of values does not match dataset columns.")

            # Mise à jour d'une instance (update)
            elif update_instance:
                try:
                    old_values, new_values = selected_instance.split(") (")  # Diviser la chaîne en deux parties
                    old_values = [val.strip() for val in old_values.strip("()").split(",")]
                    new_values = [val.strip() for val in new_values.strip("()").split(",")]

                    if len(old_values) == len(new_values) == len(dataset.columns):  # Vérifier correspondance avec les colonnes
                        condition = (dataset == old_values).all(axis=1)  # Trouver les lignes correspondantes
                        if condition.any():
                            dataset.loc[condition, :] = new_values  # Mettre à jour les lignes correspondantes
                            print(f"Row {old_values} updated to {new_values}.")
                        else:
                            print(f"No matching row found for values: {old_values}.")
                    else:
                        print("Invalid input: Number of values does not match dataset columns.")
                except ValueError:
                    print("Invalid format: Please provide two sets of values in the format '(...) (...)'.")

            # Sauvegarde du dataset mis à jour
            dataset.to_csv("./results/updated_dataset.csv", index=False)
            print("Dataset saved successfully as 'updated_dataset.csv'")

        except Exception as e:
            print(f"An unexpected error occurred: {e}")
                


    def search_action(self):
        print("Search button clicked")
        selected_file = self.comboBox_selected_file.currentText()
        # analysis and visualisation of a dataset
        attribut1 = self.comboBox_attribut1.currentText()
        attribut2 = self.comboBox_attribut2.currentText()
        boxplot = self.radioButton_boxplot.isChecked()
        histogram = self.radioButton_histogram.isChecked()
        scatterplot = self.radioButton_scatter_plot.isChecked()
        # preprocessing
        missing_values = self.radioButton_missing_values.isChecked()
        outliers = self.radioButton_outliers.isChecked()
        aggregation = self.radioButton_aggregation_by_season.isChecked()
        merge = self.radioButton_merge_datasets.isChecked()
        reduce = self.radioButton_reduce_dataset.isChecked()
        discretize = self.radioButton_discretize_dataset.isChecked()
        normalize = self.radioButton_normalize_dataset.isChecked()

        # Initialiser un dataset vide par défaut
        dataset = pd.DataFrame()
        minimise = False
        try:
            # data analysis
            if any([missing_values, outliers, aggregation, merge, reduce, discretize, normalize]):
                if selected_file == "soil_dz_allprops.csv":
                    if missing_values == True:
                        dataset = pd.read_csv("./results/soil_algeria_NAN_mean.csv")
                    elif outliers == True:
                        dataset = pd.read_csv("./results/soil_algeria_MM_outliers.csv")

                elif selected_file == "Climate_dz_data_2.csv":
                    if missing_values == True:
                        dataset = pd.read_csv("./results/algeria_climate_NAN_mean.csv")
                        minimise = True
                    elif outliers == True:
                        dataset = pd.read_csv("./results/algeria_climate_MM_outliers.csv")
                        minimise = True
                    elif aggregation == True:
                        dataset = pd.read_csv("./results/aggregated_climate_data.csv")

                elif selected_file == "cleaned_data.csv":
                    if merge == True:
                        dataset = pd.read_csv("./results/cleaned_data.csv")
                    elif reduce == True:
                        dataset = pd.read_csv("./results/reduced_cleaned_data.csv")
                    elif discretize == True:
                        dataset = pd.read_csv("./results/discretized_cleaned_data.csv")
                    elif normalize == True:
                        dataset = pd.read_csv("./results/normalized_cleaned_data.csv")
                
                # Rediriger la sortie de dataset.info() dans une chaîne
                buffer = StringIO()
                dataset.info(buf=buffer)
                dataset_infos = buffer.getvalue()  # Récupérer les informations du buffer

                if minimise:
                    dataset = dataset.head(900) # afficher que 900 premieres instances du dataset climate
         
                # Vérifier si le dataset chargé est vide
                if dataset.empty:
                    print("Dataset is empty after loading. Please check the preprocessing step or file.")
                    return
            
                # Mettre à jour les ComboBox avec les noms des colonnes
                self.comboBox_attribut1.clear()  # Effacer les anciens items
                self.comboBox_attribut2.clear()
                for col in dataset.columns:
                    self.comboBox_attribut1.addItem(col)
                    self.comboBox_attribut2.addItem(col)

                self.display_dataset(dataset_infos, dataset)
                columns_to_exclude = ["attribut1", "attribut2", "time", "geometry"]
                if attribut1 not in columns_to_exclude and attribut2 not in columns_to_exclude:
                    self.display_dataset_attribut(dataset, attribut1, attribut2, boxplot, histogram, scatterplot)
            else:
                print("Choose preprocessing step!")
        except FileNotFoundError as e:
            print(f"File not found: {e}. Initializing an empty dataset.")
            dataset = pd.DataFrame()
        except Exception as e:
            print(f"An unexpected error occurred: {e}") 

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1080, 611)
        self.main_frame = QtWidgets.QFrame(parent=Form)
        self.main_frame.setGeometry(QtCore.QRect(0, 0, 1281, 711))
        # self.main_frame.setStyleSheet("background-color : rgb(158, 184, 255);")
        self.main_frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.main_frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.main_frame.setObjectName("main_frame")
        self.frame_search_options = QtWidgets.QFrame(parent=self.main_frame)
        self.frame_search_options.setGeometry(QtCore.QRect(20, 20, 191, 571))
        # self.frame_search_options.setStyleSheet("background-color: rgb(255, 185, 252);")
        self.frame_search_options.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_search_options.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_search_options.setObjectName("frame_search_options")
        self.frame_preprocessing_options = QtWidgets.QFrame(parent=self.frame_search_options)
        self.frame_preprocessing_options.setGeometry(QtCore.QRect(10, 120, 171, 231))
        # self.frame_preprocessing_options.setStyleSheet("background-color : rgb(255, 85, 255);")
        self.frame_preprocessing_options.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.frame_preprocessing_options.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_preprocessing_options.setObjectName("frame_preprocessing_options")
        self.radioButton_missing_values = QtWidgets.QRadioButton(parent=self.frame_preprocessing_options)
        self.radioButton_missing_values.setGeometry(QtCore.QRect(10, 10, 151, 20))
        font = QtGui.QFont()
        font.setItalic(True)
        font.setStrikeOut(False)
        self.radioButton_missing_values.setFont(font)
        self.radioButton_missing_values.setObjectName("radioButton_missing_values")
        self.radioButton_outliers = QtWidgets.QRadioButton(parent=self.frame_preprocessing_options)
        self.radioButton_outliers.setGeometry(QtCore.QRect(10, 40, 131, 20))
        font = QtGui.QFont()
        font.setItalic(True)
        self.radioButton_outliers.setFont(font)
        self.radioButton_outliers.setObjectName("radioButton_outliers")
        self.radioButton_aggregation_by_season = QtWidgets.QRadioButton(parent=self.frame_preprocessing_options)
        self.radioButton_aggregation_by_season.setGeometry(QtCore.QRect(10, 70, 151, 20))
        font = QtGui.QFont()
        font.setItalic(True)
        self.radioButton_aggregation_by_season.setFont(font)
        self.radioButton_aggregation_by_season.setObjectName("radioButton_aggregation_by_season")
        self.radioButton_reduce_dataset = QtWidgets.QRadioButton(parent=self.frame_preprocessing_options)
        self.radioButton_reduce_dataset.setGeometry(QtCore.QRect(10, 130, 97, 20))
        font = QtGui.QFont()
        font.setItalic(True)
        self.radioButton_reduce_dataset.setFont(font)
        self.radioButton_reduce_dataset.setObjectName("radioButton_reduce_dataset")
        self.radioButton_merge_datasets = QtWidgets.QRadioButton(parent=self.frame_preprocessing_options)
        self.radioButton_merge_datasets.setGeometry(QtCore.QRect(10, 100, 97, 20))
        font = QtGui.QFont()
        font.setItalic(True)
        self.radioButton_merge_datasets.setFont(font)
        self.radioButton_merge_datasets.setObjectName("radioButton_merge_datasets")
        self.radioButton_discretize_dataset = QtWidgets.QRadioButton(parent=self.frame_preprocessing_options)
        self.radioButton_discretize_dataset.setGeometry(QtCore.QRect(10, 160, 131, 20))
        font = QtGui.QFont()
        font.setItalic(True)
        self.radioButton_discretize_dataset.setFont(font)
        self.radioButton_discretize_dataset.setObjectName("radioButton_discretize_dataset")
        self.radioButton_normalize_dataset = QtWidgets.QRadioButton(parent=self.frame_preprocessing_options)
        self.radioButton_normalize_dataset.setGeometry(QtCore.QRect(10, 190, 131, 20))
        font = QtGui.QFont()
        font.setItalic(True)
        self.radioButton_normalize_dataset.setFont(font)
        self.radioButton_normalize_dataset.setObjectName("radioButton_normalize_dataset")
        self.pushButton_reset = QtWidgets.QPushButton(parent=self.frame_search_options)
        self.pushButton_reset.setGeometry(QtCore.QRect(10, 410, 171, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_reset.setFont(font)
        self.pushButton_reset.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        # self.pushButton_reset.setStyleSheet("background-color : rgb(211, 0, 211);")
        self.pushButton_reset.setObjectName("pushButton_reset")

        self.pushButton_reset.clicked.connect(self.reset_action) # le boutton qui permet d'executer la fonction reset
        self.pushButton_reset.clicked.connect(self.manage_preprocessing_steps) # le boutton qui permet de gérér les etaps du preprocessing

        self.label_preprocessing = QtWidgets.QLabel(parent=self.frame_search_options)
        self.label_preprocessing.setGeometry(QtCore.QRect(20, 90, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_preprocessing.setFont(font)
        self.label_preprocessing.setObjectName("label_preprocessing")
        self.pushButton_download_file = QtWidgets.QPushButton(parent=self.frame_search_options)
        self.pushButton_download_file.setGeometry(QtCore.QRect(10, 50, 171, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_download_file.setFont(font)
        self.pushButton_download_file.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        # self.pushButton_download_file.setStyleSheet("background-color : rgb(211, 0, 211);")
        self.pushButton_download_file.setObjectName("pushButton_download_file")

        self.pushButton_download_file.clicked.connect(self.download_dataset) # le boutton qui permet d'executer la fonction download_dataset
        self.pushButton_download_file.clicked.connect(self.manage_preprocessing_steps) # le boutton qui permet de gérér les etaps du preprocessing

        self.pushButton_search = QtWidgets.QPushButton(parent=self.frame_search_options)
        self.pushButton_search.setGeometry(QtCore.QRect(10, 450, 171, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_search.setFont(font)
        self.pushButton_search.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        # self.pushButton_search.setStyleSheet("background-color : rgb(211, 0, 211);")
        self.pushButton_search.setObjectName("pushButton_search")

        self.pushButton_search.clicked.connect(self.search_action) # le boutton qui permet d'executer la fonction search_action
        self.pushButton_search.clicked.connect(self.manage_preprocessing_steps) # le boutton qui permet de gérér les etaps du preprocessing
        
        self.comboBox_selected_file = QtWidgets.QComboBox(parent=self.frame_search_options)
        self.comboBox_selected_file.setGeometry(QtCore.QRect(10, 10, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.comboBox_selected_file.setFont(font)
        # self.comboBox_selected_file.setStyleSheet("background-color : white;")
        self.comboBox_selected_file.setObjectName("comboBox_selected_file")
        self.comboBox_selected_file.addItem("")
        self.comboBox_selected_file.addItem("")
        self.comboBox_selected_file.addItem("")
        self.pushButton_save_dataset = QtWidgets.QPushButton(parent=self.frame_search_options)
        self.pushButton_save_dataset.setGeometry(QtCore.QRect(10, 370, 171, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_save_dataset.setFont(font)
        self.pushButton_save_dataset.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        # self.pushButton_save_dataset.setStyleSheet("background-color : rgb(211, 0, 211);")
        self.pushButton_save_dataset.setObjectName("pushButton_save_dataset")

        self.pushButton_save_dataset.clicked.connect(self.save_dataset) # le boutton qui permet d'executer la fonction save_dataset

        self.label_made_by = QtWidgets.QLabel(parent=self.frame_search_options)
        self.label_made_by.setGeometry(QtCore.QRect(10, 490, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_made_by.setFont(font)
        self.label_made_by.setObjectName("label_made_by")
        self.label_yasmine = QtWidgets.QLabel(parent=self.frame_search_options)
        self.label_yasmine.setGeometry(QtCore.QRect(10, 520, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_yasmine.setFont(font)
        self.label_yasmine.setObjectName("label_yasmine")
        self.label_preprocessing_4 = QtWidgets.QLabel(parent=self.frame_search_options)
        self.label_preprocessing_4.setGeometry(QtCore.QRect(10, 540, 171, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_preprocessing_4.setFont(font)
        self.label_preprocessing_4.setObjectName("label_preprocessing_4")
        self.frame_attribut_infos = QtWidgets.QFrame(parent=self.main_frame)
        self.frame_attribut_infos.setGeometry(QtCore.QRect(220, 320, 851, 281))
        # self.frame_attribut_infos.setStyleSheet("")
        self.frame_attribut_infos.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_attribut_infos.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_attribut_infos.setObjectName("frame_attribut_infos")
        self.frame_analyse_attribut = QtWidgets.QFrame(parent=self.frame_attribut_infos)
        self.frame_analyse_attribut.setGeometry(QtCore.QRect(390, 20, 461, 251))
        self.frame_analyse_attribut.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_analyse_attribut.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_analyse_attribut.setObjectName("frame_analyse_attribut")
        self.frame_type_graphique = QtWidgets.QFrame(parent=self.frame_analyse_attribut)
        self.frame_type_graphique.setGeometry(QtCore.QRect(20, 0, 301, 41))
        # self.frame_type_graphique.setStyleSheet("background-color : rgb(255, 185, 252);")
        self.frame_type_graphique.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.frame_type_graphique.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_type_graphique.setObjectName("frame_type_graphique")
        self.radioButton_boxplot = QtWidgets.QRadioButton(parent=self.frame_type_graphique)
        self.radioButton_boxplot.setGeometry(QtCore.QRect(60, 10, 61, 20))
        font = QtGui.QFont()
        font.setItalic(True)
        font.setStrikeOut(False)
        self.radioButton_boxplot.setFont(font)
        self.radioButton_boxplot.setObjectName("radioButton_boxplot")
        self.radioButton_histogram = QtWidgets.QRadioButton(parent=self.frame_type_graphique)
        self.radioButton_histogram.setGeometry(QtCore.QRect(130, 10, 81, 20))
        font = QtGui.QFont()
        font.setItalic(True)
        font.setStrikeOut(False)
        self.radioButton_histogram.setFont(font)
        self.radioButton_histogram.setObjectName("radioButton_histogram")
        self.radioButton_scatter_plot = QtWidgets.QRadioButton(parent=self.frame_type_graphique)
        self.radioButton_scatter_plot.setGeometry(QtCore.QRect(210, 10, 81, 20))
        font = QtGui.QFont()
        font.setItalic(True)
        font.setStrikeOut(False)
        self.radioButton_scatter_plot.setFont(font)
        self.radioButton_scatter_plot.setObjectName("radioButton_scatter_plot")
        self.label_graphique = QtWidgets.QLabel(parent=self.frame_type_graphique)
        self.label_graphique.setGeometry(QtCore.QRect(10, 10, 41, 16))
        self.label_graphique.setObjectName("label_graphique")
        self.comboBox_attribut2 = QtWidgets.QComboBox(parent=self.frame_analyse_attribut)
        self.comboBox_attribut2.setGeometry(QtCore.QRect(340, 30, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.comboBox_attribut2.setFont(font)
        # self.comboBox_attribut2.setStyleSheet("background-color : white;")
        self.comboBox_attribut2.setObjectName("comboBox_attribut2")
        self.comboBox_attribut2.addItem("")
        self.comboBox_attribut1 = QtWidgets.QComboBox(parent=self.frame_analyse_attribut)
        self.comboBox_attribut1.setGeometry(QtCore.QRect(340, 0, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.comboBox_attribut1.setFont(font)
        # self.comboBox_attribut1.setStyleSheet("background-color : white;")
        self.comboBox_attribut1.setObjectName("comboBox_attribut1")
        self.comboBox_attribut1.addItem("")
        self.label_central_tendancy = QtWidgets.QLabel(parent=self.frame_analyse_attribut)
        self.label_central_tendancy.setGeometry(QtCore.QRect(30, 50, 121, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_central_tendancy.setFont(font)
        self.label_central_tendancy.setObjectName("label_central_tendancy")
        self.label_outliers = QtWidgets.QLabel(parent=self.frame_analyse_attribut)
        self.label_outliers.setGeometry(QtCore.QRect(30, 200, 51, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_outliers.setFont(font)
        self.label_outliers.setObjectName("label_outliers")
        self.label_quartiles = QtWidgets.QLabel(parent=self.frame_analyse_attribut)
        self.label_quartiles.setGeometry(QtCore.QRect(30, 140, 61, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_quartiles.setFont(font)
        self.label_quartiles.setObjectName("label_quartiles")
        self.label_missing_values = QtWidgets.QLabel(parent=self.frame_analyse_attribut)
        self.label_missing_values.setGeometry(QtCore.QRect(310, 200, 101, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_missing_values.setFont(font)
        self.label_missing_values.setObjectName("label_missing_values")
        self.label_unique_valeus = QtWidgets.QLabel(parent=self.frame_analyse_attribut)
        self.label_unique_valeus.setGeometry(QtCore.QRect(310, 140, 91, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_unique_valeus.setFont(font)
        self.label_unique_valeus.setObjectName("label_unique_valeus")
        self.label_max = QtWidgets.QLabel(parent=self.frame_analyse_attribut)
        self.label_max.setGeometry(QtCore.QRect(300, 100, 41, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.label_max.setFont(font)
        self.label_max.setObjectName("label_max")
        self.label_min = QtWidgets.QLabel(parent=self.frame_analyse_attribut)
        self.label_min.setGeometry(QtCore.QRect(300, 70, 31, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.label_min.setFont(font)
        self.label_min.setObjectName("label_min")
        self.textBrowser_quartiles = QtWidgets.QTextBrowser(parent=self.frame_analyse_attribut)
        self.textBrowser_quartiles.setGeometry(QtCore.QRect(20, 160, 261, 31))
        # self.textBrowser_quartiles.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textBrowser_quartiles.setObjectName("textBrowser_quartiles")
        self.textBrowser_min = QtWidgets.QTextBrowser(parent=self.frame_analyse_attribut)
        self.textBrowser_min.setGeometry(QtCore.QRect(340, 70, 111, 21))
        # self.textBrowser_min.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textBrowser_min.setObjectName("textBrowser_min")
        self.textBrowser_outliers = QtWidgets.QTextBrowser(parent=self.frame_analyse_attribut)
        self.textBrowser_outliers.setGeometry(QtCore.QRect(20, 220, 261, 31))
        # self.textBrowser_outliers.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textBrowser_outliers.setObjectName("textBrowser_outliers")
        self.textBrowser_max = QtWidgets.QTextBrowser(parent=self.frame_analyse_attribut)
        self.textBrowser_max.setGeometry(QtCore.QRect(340, 100, 111, 21))
        # self.textBrowser_max.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textBrowser_max.setObjectName("textBrowser_max")
        self.textBrowser_unique_values = QtWidgets.QTextBrowser(parent=self.frame_analyse_attribut)
        self.textBrowser_unique_values.setGeometry(QtCore.QRect(300, 160, 151, 31))
        # self.textBrowser_unique_values.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textBrowser_unique_values.setObjectName("textBrowser_unique_values")
        self.textBrowser_missing_values = QtWidgets.QTextBrowser(parent=self.frame_analyse_attribut)
        self.textBrowser_missing_values.setGeometry(QtCore.QRect(300, 220, 151, 31))
        # self.textBrowser_missing_values.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textBrowser_missing_values.setObjectName("textBrowser_missing_values")
        self.textBrowser_mean = QtWidgets.QTextBrowser(parent=self.frame_analyse_attribut)
        self.textBrowser_mean.setGeometry(QtCore.QRect(100, 70, 121, 21))
        # self.textBrowser_mean.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textBrowser_mean.setObjectName("textBrowser_mean")
        self.textBrowser_mode = QtWidgets.QTextBrowser(parent=self.frame_analyse_attribut)
        self.textBrowser_mode.setGeometry(QtCore.QRect(100, 110, 121, 21))
        # self.textBrowser_mode.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textBrowser_mode.setObjectName("textBrowser_mode")
        self.textBrowser_median = QtWidgets.QTextBrowser(parent=self.frame_analyse_attribut)
        self.textBrowser_median.setGeometry(QtCore.QRect(100, 90, 121, 21))
        # self.textBrowser_median.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textBrowser_median.setObjectName("textBrowser_median")
        self.label_mean = QtWidgets.QLabel(parent=self.frame_analyse_attribut)
        self.label_mean.setGeometry(QtCore.QRect(40, 70, 41, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_mean.setFont(font)
        self.label_mean.setObjectName("label_mean")
        self.label_median = QtWidgets.QLabel(parent=self.frame_analyse_attribut)
        self.label_median.setGeometry(QtCore.QRect(40, 90, 51, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_median.setFont(font)
        self.label_median.setObjectName("label_median")
        self.label_mode = QtWidgets.QLabel(parent=self.frame_analyse_attribut)
        self.label_mode.setGeometry(QtCore.QRect(40, 110, 41, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.label_mode.setFont(font)
        self.label_mode.setObjectName("label_mode")
        self.label_attribut_analysis_visualisation = QtWidgets.QLabel(parent=self.frame_attribut_infos)
        self.label_attribut_analysis_visualisation.setGeometry(QtCore.QRect(240, 0, 341, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_attribut_analysis_visualisation.setFont(font)
        self.label_attribut_analysis_visualisation.setObjectName("label_attribut_analysis_visualisation")
        self.label_attribut = QtWidgets.QLabel(parent=self.frame_attribut_infos)
        self.label_attribut.setGeometry(QtCore.QRect(760, 0, 51, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_attribut.setFont(font)
        self.label_attribut.setObjectName("label_attribut")
        self.graphicsView_graphique = QtWidgets.QGraphicsView(parent=self.frame_attribut_infos)
        self.graphicsView_graphique.setGeometry(QtCore.QRect(0, 20, 401, 251))
        # self.graphicsView_graphique.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.graphicsView_graphique.setObjectName("graphicsView_graphique")
        self.frame_dataset_manipulation_display = QtWidgets.QFrame(parent=self.main_frame)
        self.frame_dataset_manipulation_display.setGeometry(QtCore.QRect(220, 10, 851, 311))
        # self.frame_dataset_manipulation_display.setStyleSheet("")
        self.frame_dataset_manipulation_display.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_dataset_manipulation_display.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_dataset_manipulation_display.setObjectName("frame_dataset_manipulation_display")
        self.label_display_dataset = QtWidgets.QLabel(parent=self.frame_dataset_manipulation_display)
        self.label_display_dataset.setGeometry(QtCore.QRect(390, 0, 131, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_display_dataset.setFont(font)
        self.label_display_dataset.setObjectName("label_display_dataset")
        self.label_dataset_description = QtWidgets.QLabel(parent=self.frame_dataset_manipulation_display)
        self.label_dataset_description.setGeometry(QtCore.QRect(30, 0, 141, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_dataset_description.setFont(font)
        self.label_dataset_description.setObjectName("label_dataset_description")
        self.frame_data_manipulation = QtWidgets.QFrame(parent=self.frame_dataset_manipulation_display)
        self.frame_data_manipulation.setGeometry(QtCore.QRect(0, 260, 341, 41))
        # self.frame_data_manipulation.setStyleSheet("background-color : rgb(255, 185, 252);")
        self.frame_data_manipulation.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.frame_data_manipulation.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_data_manipulation.setObjectName("frame_data_manipulation")
        self.radioButton_add_instance = QtWidgets.QRadioButton(parent=self.frame_data_manipulation)
        self.radioButton_add_instance.setGeometry(QtCore.QRect(20, 10, 91, 20))
        font = QtGui.QFont()
        font.setItalic(True)
        font.setStrikeOut(False)
        self.radioButton_add_instance.setFont(font)
        self.radioButton_add_instance.setObjectName("radioButton_add_instance")
        self.radioButton_update_instance = QtWidgets.QRadioButton(parent=self.frame_data_manipulation)
        self.radioButton_update_instance.setGeometry(QtCore.QRect(120, 10, 111, 20))
        font = QtGui.QFont()
        font.setItalic(True)
        font.setStrikeOut(False)
        self.radioButton_update_instance.setFont(font)
        self.radioButton_update_instance.setObjectName("radioButton_update_instance")
        self.radioButton_delete_instance = QtWidgets.QRadioButton(parent=self.frame_data_manipulation)
        self.radioButton_delete_instance.setGeometry(QtCore.QRect(230, 10, 101, 20))
        font = QtGui.QFont()
        font.setItalic(True)
        font.setStrikeOut(False)
        self.radioButton_delete_instance.setFont(font)
        self.radioButton_delete_instance.setObjectName("radioButton_delete_instance")
        self.lineEdit_dataset_manipulation = QtWidgets.QLineEdit(parent=self.frame_dataset_manipulation_display)
        self.lineEdit_dataset_manipulation.setGeometry(QtCore.QRect(350, 260, 491, 41))
        # self.lineEdit_dataset_manipulation.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_dataset_manipulation.setObjectName("lineEdit_dataset_manipulation")
        self.label_dataset_manipulation = QtWidgets.QLabel(parent=self.frame_dataset_manipulation_display)
        self.label_dataset_manipulation.setGeometry(QtCore.QRect(20, 240, 161, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_dataset_manipulation.setFont(font)
        self.label_dataset_manipulation.setObjectName("label_dataset_manipulation")
        self.textBrowser_dataset_infos = QtWidgets.QTextBrowser(parent=self.frame_dataset_manipulation_display)
        self.textBrowser_dataset_infos.setGeometry(QtCore.QRect(0, 20, 241, 211))
        # self.textBrowser_dataset_infos.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textBrowser_dataset_infos.setObjectName("textBrowser_dataset_infos")
        self.tableWidget_display_dataset = QtWidgets.QTableWidget(parent=self.frame_dataset_manipulation_display)
        self.tableWidget_display_dataset.setGeometry(QtCore.QRect(260, 20, 581, 211))
        # self.tableWidget_display_dataset.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.tableWidget_display_dataset.setObjectName("tableWidget_display_dataset")
        self.tableWidget_display_dataset.setColumnCount(0)
        self.tableWidget_display_dataset.setRowCount(0)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Projet DM Part1"))
        self.radioButton_missing_values.setText(_translate("Form", "Handling missing values"))
        self.radioButton_outliers.setText(_translate("Form", "Handling outliers"))
        self.radioButton_aggregation_by_season.setText(_translate("Form", "Aggregation by season"))
        self.radioButton_reduce_dataset.setText(_translate("Form", "Reduce dataset"))
        self.radioButton_merge_datasets.setText(_translate("Form", "Merge datasets"))
        self.radioButton_discretize_dataset.setText(_translate("Form", "Discretize dataset"))
        self.radioButton_normalize_dataset.setText(_translate("Form", "Normalize dataset"))
        self.pushButton_reset.setText(_translate("Form", "Reset"))
        self.label_preprocessing.setText(_translate("Form", "Preprocessing"))
        self.pushButton_download_file.setText(_translate("Form", "download dataset"))
        self.pushButton_search.setText(_translate("Form", "Search"))
        self.comboBox_selected_file.setItemText(0, _translate("Form", "soil_dz_allprops.csv"))
        self.comboBox_selected_file.setItemText(1, _translate("Form", "Climate_dz_data_2.csv"))
        self.comboBox_selected_file.setItemText(2, _translate("Form", "cleaned_data.csv"))
        self.pushButton_save_dataset.setText(_translate("Form", "Save Dataset"))
        self.label_made_by.setText(_translate("Form", "Made by :"))
        self.label_yasmine.setText(_translate("Form", "ARBADJI Yasmine"))
        self.label_preprocessing_4.setText(_translate("Form", "HADJ MEBAREK Aymen"))
        self.radioButton_boxplot.setText(_translate("Form", "Boxplot"))
        self.radioButton_histogram.setText(_translate("Form", "Histogram"))
        self.radioButton_scatter_plot.setText(_translate("Form", "Scatter plot"))
        self.label_graphique.setText(_translate("Form", "Graphic"))
        self.comboBox_attribut2.setItemText(0, _translate("Form", "attribut2"))
        self.comboBox_attribut1.setItemText(0, _translate("Form", "attribut1"))
        self.label_central_tendancy.setText(_translate("Form", "Central tendancy"))
        self.label_outliers.setText(_translate("Form", "Outliers"))
        self.label_quartiles.setText(_translate("Form", "Quartiles"))
        self.label_missing_values.setText(_translate("Form", "Missing values"))
        self.label_unique_valeus.setText(_translate("Form", "Unique values"))
        self.label_max.setText(_translate("Form", "max"))
        self.label_min.setText(_translate("Form", "Min"))
        self.label_mean.setText(_translate("Form", "Mean"))
        self.label_median.setText(_translate("Form", "Median"))
        self.label_mode.setText(_translate("Form", "Mode"))
        self.label_attribut_analysis_visualisation.setText(_translate("Form", "Analysis and visualisation of a dataset attribut"))
        self.label_attribut.setText(_translate("Form", "Attribut"))
        self.label_display_dataset.setText(_translate("Form", "Display Dataset"))
        self.label_dataset_description.setText(_translate("Form", "Dataset description"))
        self.radioButton_add_instance.setText(_translate("Form", "Add instance"))
        self.radioButton_update_instance.setText(_translate("Form", "update instance"))
        self.radioButton_delete_instance.setText(_translate("Form", "delete instance"))
        self.label_dataset_manipulation.setText(_translate("Form", "Dataset manipulation"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    
    # Create a main window for standalone testing
    main_window = QtWidgets.QMainWindow()
    widget = DataAnalysisWidget()
    main_window.setCentralWidget(widget)
    main_window.setWindowTitle("Data Analysis Widget")
    main_window.resize(1080, 611)
    main_window.show()
    
    sys.exit(app.exec())